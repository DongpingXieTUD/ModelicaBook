# 
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example 0.2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-14 10:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/behavior/discrete/events.rst:4
msgid "Events"
msgstr ""

#: ../../source/behavior/discrete/events.rst:8
msgid ""
"In the first chapter on :ref:`basic-equations` we saw examples of how to "
"describe continuous behavior.  The equations introduced in that chapter "
"applied at all times and the solutions to those equations were always "
"continuous.  In this chapter, we discussed the various ways in Modelica to "
"describe discrete behavior.  Events are the root cause of all discrete "
"behavior in Modelica."
msgstr ""

#: ../../source/behavior/discrete/events.rst:16
msgid "Conditional Expressions"
msgstr ""

#: ../../source/behavior/discrete/events.rst:22
msgid ""
"Events are generated in one of two ways.  First, they can be generated by "
"conditional expressions.  In the first few examples in this chapter, we saw "
"that conditional expressions can trigger events.  If these conditional "
"expressions only involve the variable ``time``, then we call them \"time "
"events\".  The ``time`` variable is a built-in, global variable that is "
"treated as an \"input\" to all models."
msgstr ""

#: ../../source/behavior/discrete/events.rst:31
msgid ""
"If events are generated because of conditional expressions that involve "
"solution variables, then we call them \"state events\".  The important "
"distinctions between time events and state events were discussed in the "
":ref:`first <cooling-revisited>` and :ref:`second <bouncing-ball>` sections "
"of this chapter, respectively."
msgstr ""

#: ../../source/behavior/discrete/events.rst:37
msgid ""
"Conditional expressions can be created using the relational operators "
"(``>``, ``>=``, ``<``, ``<=``, ``==``) and logical operators (``not``, "
"``and``, ``or``).  As we saw in our discussion of :ref:`no-event`, it is "
"possible to suppress the events generated by these conditional expressions "
"by surrounding them with the ``noEvent`` operator."
msgstr ""

#: ../../source/behavior/discrete/events.rst:43
msgid ""
"Frequently, these event generating conditional expressions occur in the "
"context of an ``if`` statement or an ``if`` expression.  But it should also "
"be noted that even a simple variable assignment, *e.g.,*"
msgstr ""

#: ../../source/behavior/discrete/events.rst:53
msgid "can trigger an event to be generated."
msgstr ""

#: ../../source/behavior/discrete/events.rst:83
msgid "Events and Functions"
msgstr ""

#: ../../source/behavior/discrete/events.rst:137
msgid "``sample(expr,clock)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:6
msgid "events"
msgstr ""

#: ../../source/behavior/discrete/events.rst:18
msgid "time events"
msgstr ""

#: ../../source/behavior/discrete/events.rst:20
msgid "time"
msgstr ""

#: ../../source/behavior/discrete/events.rst:29
msgid "state events"
msgstr ""

#: ../../source/behavior/discrete/events.rst:56
msgid "Piecewise Constructions"
msgstr ""

#: ../../source/behavior/discrete/events.rst:58
msgid ""
"There is an important special case when dealing with conditional "
"expressions.  In some cases, it is useful to create an expression that is "
"constructed piecewise.  For example,"
msgstr ""

#: ../../source/behavior/discrete/events.rst:66
msgid ""
"It is hard for a Modelica compiler to reliably determine that such a "
"function is continuous or whether it has continuous derivatives.  For this "
"reason, Modelica includes the ``smooth`` operator to explicitly express such"
" conditions.  For example, using the ``smooth`` operator as follows:"
msgstr ""

#: ../../source/behavior/discrete/events.rst:76
msgid ""
"indicates that the expression is continuous as is and will remain continuous"
" if differentiated up to 2 times.  Of course, in this case the expression is"
" continuous regardless of the number of differentiations.  But the "
"``smooth`` operator requires an upper bound to be specified."
msgstr ""

#: ../../source/behavior/discrete/events.rst:85
msgid ""
"In addition to being generated by conditional expressions, events can also "
"be generated by certain functions in Modelica."
msgstr ""

#: ../../source/behavior/discrete/events.rst:89
msgid "Event Generating Functions"
msgstr ""

#: ../../source/behavior/discrete/events.rst:91
msgid ""
"The following is a list of functions that generate events wherever the "
"return value has a discontinuity."
msgstr ""

#: ../../source/behavior/discrete/events.rst:95
#: ../../source/behavior/discrete/events.rst:116
#: ../../source/behavior/discrete/events.rst:132
#: ../../source/behavior/discrete/events.rst:149
msgid "Function"
msgstr ""

#: ../../source/behavior/discrete/events.rst:95
#: ../../source/behavior/discrete/events.rst:116
#: ../../source/behavior/discrete/events.rst:132
#: ../../source/behavior/discrete/events.rst:149
msgid "Description"
msgstr ""

#: ../../source/behavior/discrete/events.rst:97
msgid "``div(x,y)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:97
msgid "Algebraic quotient with fractional part discarded."
msgstr ""

#: ../../source/behavior/discrete/events.rst:98
msgid "``mod(x,y)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:98
msgid "Modulus of ``x``/``y``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:99
msgid "``rem(x,y)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:99
msgid "Remainder from the algebraic quotient"
msgstr ""

#: ../../source/behavior/discrete/events.rst:100
msgid "``ceil(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:100
msgid "Smallest integer not less than ``x``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:101
msgid "``floor(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:101
msgid "Largest integer not greater than ``x`` (returns a ``Real``)"
msgstr ""

#: ../../source/behavior/discrete/events.rst:102
msgid "``integer(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:102
msgid "Largest integer not greater than ``x`` (returns an ``Integer``)"
msgstr ""

#: ../../source/behavior/discrete/events.rst:103
msgid "``initial()``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:103
msgid "``true`` during initialization, otherwise ``false``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:104
msgid "``terminal()``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:104
msgid "``true`` at end of simulation, otherwise ``false``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:105
msgid "``sample(t0,dt)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:105
msgid "Generates an event at ``t0`` and every ``dt`` seconds later"
msgstr ""

#: ../../source/behavior/discrete/events.rst:106
msgid "``edge(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:106
msgid "``true`` only at the instant that ``x`` is ``true``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:107
msgid "``change(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:107
msgid "``true`` whenever ``x`` changes value"
msgstr ""

#: ../../source/behavior/discrete/events.rst:111
msgid "Non-Event Generating Functions"
msgstr ""

#: ../../source/behavior/discrete/events.rst:113
msgid "The following is a table of functions that do **not** generate events:"
msgstr ""

#: ../../source/behavior/discrete/events.rst:118
msgid "``abs(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:118
msgid "Absolute value of ``x``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:119
msgid "``sign(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:119
msgid "Sign of ``x`` (-1, 0, or 1)"
msgstr ""

#: ../../source/behavior/discrete/events.rst:120
msgid "``sqrt(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:120
msgid "Square root of ``x``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:121
msgid "``min(x,y)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:121
msgid "Minimum value between ``x`` and ``y``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:122
msgid "``max(x,y)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:122
msgid "Maximum value between ``x`` and ``y``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:126
msgid "Event Related Operators"
msgstr ""

#: ../../source/behavior/discrete/events.rst:128
msgid ""
"The following operators provide special information about event generating "
"signals:"
msgstr ""

#: ../../source/behavior/discrete/events.rst:134
msgid "``pre(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:134
msgid "During an event, holds the value of ``x`` before the event"
msgstr ""

#: ../../source/behavior/discrete/events.rst:135
msgid "``previous(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:135
msgid "During clock tick, value of ``x`` during previous clock tick"
msgstr ""

#: ../../source/behavior/discrete/events.rst:136
msgid "``hold(x)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:136
msgid "Anytime, value of ``x`` during previous clock tick"
msgstr ""

#: ../../source/behavior/discrete/events.rst:137
msgid "During clock tick, value of ``expr``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:138
msgid "``noEvent(expr)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:138
msgid "Suppresses events generated by ``expr``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:139
msgid "``smooth(expr,p)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:139
msgid "Indicates ``expr`` can be safely differentiated ``p`` times."
msgstr ""

#: ../../source/behavior/discrete/events.rst:143
msgid "Clock Related Operators"
msgstr ""

#: ../../source/behavior/discrete/events.rst:145
msgid ""
"The following operators are used to create a manipulate clocks (event "
"generators that trigger at regular intervals):"
msgstr ""

#: ../../source/behavior/discrete/events.rst:151
msgid "``Clock(i,r)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:152
msgid "``Clock(dt)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:152
msgid "A clock that fires every :math:`dt` seconds where ``dt`` is a ``Real``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:153
msgid "``subSample(u,s)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:153
msgid ""
"A clock that samples ``s`` times slower than the clock used to sample ``u`` "
"where ``s`` is an ``Integer``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:154
msgid "``superSample(u,s)``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:154
msgid ""
"A clock that samples ``s`` times faster than the clock used to sample ``u`` "
"where ``s`` is an ``Integer``"
msgstr ""

#: ../../source/behavior/discrete/events.rst:157
msgid ""
"Note that the ``Clock`` constructor function is overloaded (*i.e.,* can take"
" different arguments).  It is worth reiterating that the synchronous clock "
"features in Modelica are relatively new.  As such, they are not yet "
"supported by all Modelica compilers.  To learn more about these synchronous "
"features and their applications see [Elmqvist]_ and/or the Modelica "
"Specification, version 3.3 or later."
msgstr ""

#: ../../source/behavior/discrete/events.rst:164
msgid ""
"\"Fundamentals of Synchronous Control in Modelica\", Hilding Elmqvist, "
"Martin Otter and Sven-Erik Mattsson "
"http://www.ep.liu.se/ecp/076/001/ecp12076001.pdf"
msgstr ""

#: ../../source/behavior/discrete/events.rst:151
msgid ""
"A clock that fires every :math:`\\frac{i}{r}` seconds where ``i`` and ``r`` "
"are both of type ``Integer``"
msgstr ""

#~ msgid ""
#~ "A clock that fires every :math:`\\frac{i}{r}` seconds where ``i`` and ``r`` "
#~ "are ``Integer``s"
#~ msgstr ""
