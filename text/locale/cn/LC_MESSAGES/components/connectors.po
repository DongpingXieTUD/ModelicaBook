# 
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example 0.2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-14 10:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/components/connectors.rst:4
msgid "Connectors"
msgstr "连接器"

#: ../../source/components/connectors.rst:9
msgid "Introduction"
msgstr "简介"

#: ../../source/components/connectors.rst:12
msgid "Component-Oriented Modeling"
msgstr "基于组件的建模"

#: ../../source/components/connectors.rst:14
msgid ""
"Before diving into some examples, there is a bit of background required in "
"order to understand what a ``connector`` in Modelica is, why it is used and "
"the mathematical basis for their formulations. We'll cover these points "
"first before proceeding."
msgstr ""
"一些实例中之前，读者需要了解一些必要的背景知识，"
"以了解什么是Modelica的\ ``connector``\ ，为什么要使用\ ``connector``\ 以及其组成的数学基础。"
"我们将在继续前首先介绍上述要点。"

#: ../../source/components/connectors.rst:19
msgid ""
"So far, we've talked primarily about how to model behavior.  What we've seen"
" so far are models composed largely of textual equations.  But from this "
"point forward, we will be exploring how to create reusable component models."
"  So instead of writing Ohm's law whenever we wish to model a resistor, "
"we'll instead add an instance of a **resistor** component model to our "
"system."
msgstr ""
"到目前为止，我们的讨论主要关于对行为的建模。"
"我们至此看到的大多是由方程代码所组成的模型。"
"但从现在开始，我们将探讨如何创建可重用的组件模型。"
"因此，我们将不再在每次模拟电阻都写出欧姆定律。相对地，我们将把\ **电阻**\ 组件模型的实例添加到系统里。"

#: ../../source/components/connectors.rst:26
msgid ""
"Until now, the models that we've shown have all been self contained. All the"
" behavior of our entire system was captured in a single model and "
"represented by textual equations.  But this approach does not scale well.  "
"What we really want is the ability to create reusable component models."
msgstr ""
"Until now, the models that we've shown have all been self contained."
"到现在为止，我们看到的模型全部都是完整的。"
"整个系统的所有行为均囊括在单个模型内，且通过方程代码来表示。"
"但这种方法不能很好地扩展开。"
"我们真正想要的是创建可重用组件模型的能力。"

#: ../../source/components/connectors.rst:32
msgid ""
"But before we can dive into how to create these components, we need to first"
" discuss how we will be connecting them together.  The component models that"
" we will be building during the remainder of the book are still represented "
"by a ``model`` definition.  What sets them apart from the models we have "
"seen so far is that they will feature **connectors**."
msgstr ""
"但在研究我们如何可以创建这些部件之前，我们需要先讨论如何将部件连接在一起。"
"我们在本书的其余部分也会继续讨论组件模型。"
"这些组件模型也仍将表示为\ ``model``\ 定义。"
"与迄今所见模型的不同点是，他们将带有\ **连接器**\ 。"

#: ../../source/components/connectors.rst:39
msgid ""
"A ``connector`` is a way for one model to exchange information with another "
"model.  As we'll see, there are different ways that we may wish to exchange "
"this information and this chapter will focus on explaining the various "
"semantics that can be used to describe connectors in Modelica."
msgstr ""
"\ ``connector``\ 是一种让模型与模型交换信息的方法。"
"我们将看到其他来交换这些信息的方法。"
"这一章将重点讲解在Modelica中用来描述连接器的各种不同语义。"

#: ../../source/components/connectors.rst:48
msgid "Acausal Connections"
msgstr "非因果连接"

#: ../../source/components/connectors.rst:50
msgid ""
"In order to understand one specific class of connector semantics, it is "
"first necessary to understand a bit more about acausal formulations of "
"physical systems.  An acausal approach to physical modeling identifies two "
"distinct classes of variables."
msgstr ""
"为了明白一类特定接口的语义，首先要了解物理系统的非因果表示方式。"
"非因果物理建模方法区分了两类不同的变量。"

#: ../../source/components/connectors.rst:55
msgid ""
"The first class of variables we will discuss are \"across\" variables (also "
"called *potential* or *effort* variables).  Differences in the values of "
"across variables across a component are what trigger components to react.  "
"Typical examples of across variables, that we will be discussing shortly, "
"are temperature, voltage and pressure. Differences in these quantities "
"typically lead to dynamic behavior in the system."
msgstr ""
"我们将讨论的第一类变量是“横跨”变量（也称为\ *势*\ 或\ *功用变量*\ ）。"
"横跨变量跨越部件时的增减值就是让部件运动的原因。"
"横跨变量的典型例子有温度、电压和压力。我们将马上对这些变量进行讨论。"
"这些量的差异值通常会导致在系统的动态行为。"

#: ../../source/components/connectors.rst:63
msgid ""
"The second class of variables we will discuss are \"through\" variables "
"(also called *flow* variables).  Flow variables normally represent the flow "
"of some conserved quantity like mass, momentum, energy, charge, *etc.*  "
"These flows are usually the result of some difference in the across "
"variables across a component model.  For example, current flowing through a "
"resistor is in response to a voltage difference across the two sides of the "
"resistor.  As we will see in many of the examples to come, there are many "
"different types of relationships between the through and across variables "
"(Ohm's law being just one of many)."
msgstr ""
"我们将讨论的第二类变量是“穿越”变量（也称为\ *流*\ 变量）。"
"流变量通常代表了一些保守量，如质量、动量、能量、电荷等等。"
"这些流通常是横跨变量在跨越部件时有差值的结果。"
"例如，通过电阻的电流流动是由于电阻两侧的电压差。"
"正如我们将在许多例子中看到的一样，穿越变量与横跨变量间有很多种不同的关系（欧姆定律仅是冰山一角） 。"

#: ../../source/components/connectors.rst:0
msgid "Sign Conventions"
msgstr "正负号规则"

#: ../../source/components/connectors.rst:76
msgid ""
"It is extremely important to know that Modelica follows a convention that a "
"positive value for a through variable represents flow of the conserved "
"quantity **into** a component.  We'll repeat this convention several times "
"later in the book (especially once we begin our discussion of how to build "
"models of :ref:`components`)."
msgstr ""
"一定一定要知道Modelica遵从如下的正负号规则：穿越变量的正值表示守恒量在流\ **入**\ 某个组件。"
"我们将在本书后面多次重复这个规则（特别是在我们开始讨论如何构建\ :ref:`components`\ 模型的时候）。"

#: ../../source/components/connectors.rst:83
msgid ""
"The next section will define through and across variables for a number of "
"basic engineering domains."
msgstr ""
"下一节将为一些基本工程领域分别定义穿越变量和横跨变量。"

#: ../../source/components/connectors.rst:87
msgid "Examples"
msgstr "示例"

#: ../../source/components/connectors.rst:100
msgid "Review"
msgstr "复习"
