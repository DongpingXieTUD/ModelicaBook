# 
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example 0.2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-14 10:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dongping Xie <dongping.xie.tud@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/components/packages/organizing.rst:4
msgid "Organizing Content"
msgstr "组织内容"

#: ../../source/components/packages/organizing.rst:6
msgid ""
"Let's start by simply demonstrating how content can be organized into "
"packages.  To do this, we will revisit the :ref:`classic-lotka-volterra` "
"model.  In our previous models, all variables had the type ``Real``.  Let's "
"enhance that model to include types for the various quantities in the model."
msgstr ""
"让我们先来简单地演示如何将内容组织成包。"
"要做到这一点，我们将重温\ :ref:`classic-lotka-volterra`\ 模型。"
"在我们前述的模型中，所有的变量类型均是\ ``Real``\ 。"
"让我们来优化模型中一系列不同量的类型。"

#: ../../source/components/packages/organizing.rst:12
msgid "We can organize those types into a package like this:"
msgstr "我们可以将这些类型组织成如下的包："

#: ../../source/components/packages/organizing.rst:18
msgid ""
"The first thing to note about this Modelica code is that it uses the "
"``package`` keyword.  The syntax of a ``package`` definition is very similar"
" to the definition of a ``model`` or ``function``.  The main difference is "
"that a ``package`` contains only definitions or constants.  It cannot "
"contain any variable declarations except those that are ``constant``.  In "
"this case, we see that this ``package`` contains only ``type`` definitions."
msgstr ""
"对于这段Modelica代码，需要注意的第一件事情是，它使用了\ ``package``\ 关键字。"
"定义\ ``package``\ 的语法与定义\ ``model``\ 或\ ``function``\ 的语法非常相似。"
"而它们的主要区别在于\ ``package``\ 内仅包含定义或常量。"
"\ ``package``\ 定义除了\ ``constant``\ 量外不能包含任何变量声明。"
"在本例，我们看到这个\ ``package``\ 只包含\ ``type``\ 的定义。"

#: ../../source/components/packages/organizing.rst:26
msgid ""
"Now let's turn our attention to the Lotka-Volterra model itself. Assuming it"
" doesn't need to define the types itself, but can rely on the types we've "
"just defined, it can be refactored to look as follows:"
msgstr ""
"现在，让我们把注意力转向Lotka-Volterra模型本身。"
"假设此模型自身不需要定义类型，而去依赖于我们刚才定义的类型，模型可以被重构如下："

#: ../../source/components/packages/organizing.rst:35
msgid ""
"Notice how all the parameters and variables now have a specific type (and "
"not just the ordinary ``Real`` type).  Instead, we are able to associate "
"additional information above and beyond the fact that these are continuous "
"variables.  For example, we can specify that these values should not be "
"negative by adding the ``min=0`` modifier to their type definitions."
msgstr ""
"请注意，现在所有的参数和变量如何得到一个特定类型（而不仅仅是普通的\ ``Real``\ 类型）。"
"相反，我们能够将变量和附加信息相关联，而不局限于其为连续变量这一事实。"
"例如，通过在类型定义加入\ ``min=0``\ 这一修饰符，我们可以规定变量非负。"

#: ../../source/components/packages/organizing.rst:42
msgid ""
"Looking at the Lotka-Volterra model by itself, it isn't obvious **where** it"
" finds these type definitions.  The Modelica compiler will use a collection "
"of :ref:`lookup-rules` to lookup these definitions. We'll come to the lookup"
" rules eventually.  For now, the important point is that we have the ability"
" to refer to things that are not in our immediate model."
msgstr ""
"仅通过观察Lotka-Volterra模型，我们很难发现模型\ **在哪里**\ 找到上述的类型定义。"
"Modelica编译器会使用一系列\ :ref:`lookup-rules`\ 来查找上述定义。"
"在后面我们将会介绍查找规则。"
"就目前而言重要的一点是，我们有引用模型外数据的能力。"

#: ../../source/components/packages/organizing.rst:49
msgid ""
"Let's \"zoom out\" a little bit to see some additional details related to "
"organizing models.  The ``Types`` package we showed earlier and the "
"``LotkaVolterra`` model that references it are contained within a package "
"called ``NestedPackages`` which is defined as follows:"
msgstr ""
"让我们稍稍离开目前的主题，去看看关于组织的一些额外细节。"
"前述的\ ``Types``\ 包以及对其进行引用的\ ``LotkaVolterra``\ 模型均是一个称为\ ``NestedPackages``\ 的包的一部分。"
"\ ``NestedPackages``\ 的定义如下："

#: ../../source/components/packages/organizing.rst:57
msgid ""
"A really important thing to note about the ``NestedPackages`` package is "
"that it is contained inside another package called ``PackageExamples`` which"
" is, in turn, contained within a package called ``ModelicaByExample``.  We "
"know this from the ``within`` clause at the top:"
msgstr ""
"需要注意，关于\ ``NestedPackages``\ 包一个非常重要的点是，它是包含在另一个名为\ ``PackageExamples``\ 的包内。"
"而\ ``PackageExamples``\ 则又是一个名为\ ``ModelicaByExample``\ 的包的一部分。"
"由顶部的\ ``within``\ 子句我们便可以发现这点："

#: ../../source/components/packages/organizing.rst:67
msgid ""
"**Every single model** that we've simulated so far in this book is contained"
" within a package.  When we showed the source code to those examples, we "
"clipped the top line because we were not yet ready to discuss what the "
"``within`` clause was used for.  But it was there in all cases."
msgstr ""
"在这本书至今模拟过的\ **每一个模型**\ 均是包含在包内的。"
"而在展示那些例子的源代码时，我们都将首行隐藏了起来。原因是当时我们还没有准备好讨论\ ``within``\ 子句的作用。"
"但\ ``within``\ 子句在那些例子中均是存在的。"

#: ../../source/components/packages/organizing.rst:73
msgid ""
"Note that the ``Types`` package and the ``LotkaVolterra`` model don't "
"include any kind of ``within`` clause.  That's because we **know** what "
"package they are in because they are defined directly inside the "
"``NestedPackages`` package.  So why does it appear immediately before the "
"definition of ``NestedPackages``?  Because the ``NestedPackages`` package is"
" a stand-alone file.  In other words, when Modelica definitions are mapped "
"into files and directories, we need to explicitly specify how they are "
"related.  We'll discuss the relationship between files, directories and :ref"
":`package-definitions` later.  For now, the important thing to understand is"
" that the ``within`` clause is simply used to specify the parent package."
msgstr ""
"注意，\ ``Types``\ 包以及\ ``LotkaVolterra``\ 模型并没有任何的\ ``within``\ 子句。"
"原因是由于它们均是直接定义在\ ``NestedPackages``\ 包内，因而我们\ **知道**\ 它们具体在什么包内。"
"那么，为什么这个子句会直接出现在\ ``NestedPackages``\ 的定义之前呢？"
"这是因为\ ``NestedPackages``\ 是个独立的文件。"
"换言之，Modelica定义映射到文件和目录时，我们需要明确指定定义之间的关系。"
"我们将在后面讨论的文件、目录和\ :ref:`package-definitions`\ 之间的关系。"
"暂时而言，重要的是了解\ ``within``\ 子句仅用于指定文件所从属的父包。"
