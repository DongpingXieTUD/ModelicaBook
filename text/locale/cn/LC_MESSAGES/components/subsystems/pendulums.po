# 
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example 0.2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-14 10:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/components/subsystems/pendulums.rst:4
msgid "Harmonic Motion of Pendulums"
msgstr "钟摆的间谐运动"

#: ../../source/components/subsystems/pendulums.rst:6
msgid ""
"In this section, we will recreate an interesting experiment [Berg]_ "
"involving pendulums.  If we create a series of pendulums with different "
"natural frequencies and then start them all at the same position, what we "
"will see is that they will oscillate at different frequencies.  But if we "
"remove any energy dissipation from the system, they will eventually all "
"\"reunite\" at their initial position."
msgstr ""
"在这一节中，我们将重新创建一个涉及摆的有趣实验\\ [Berg]_\\ "
"。如果我们创建了具有不同固有频率的一系列摆，并让其在相同的位置开始运动。我们将看到它们会在不同的频率产生振荡。但是，如果我们从系统中删除所有能量耗散，所有的摆最终将在其最初的位置“团聚”。"

#: ../../source/components/subsystems/pendulums.rst:13
msgid ""
"In general, the period between these \"reunion\" events is the least common "
"multiple of the periods of all the pendulums in the system.  We can choose "
"the lengths of the pendulums to achieve a specific period between these "
"\"reunions\"."
msgstr "一般来说，这些“团聚”事件间的周期为是系统中所有摆周期的最小公倍数。我们可以通过选择摆的长度来实现一个特定的“团圆”周期。"

#: ../../source/components/subsystems/pendulums.rst:19
msgid "Pendulum Model"
msgstr "钟摆模式"

#: ../../source/components/subsystems/pendulums.rst:21
msgid ""
"In this section, we will use arrays of components to build our subsystem "
"model just like we did in our :ref:`distributed-heat-transfer` example.  But"
" before we can create an array of pendulums, we need to first have a model "
"of a single pendulum."
msgstr ""
"在本节中，我们可以像\\ :ref:`distributed-heat-transfer`\\ "
"的例子一样用组件阵列来建立子系统模型。但在创建摆的数组之前，我们需要先有一个单摆的模型。"

#: ../../source/components/subsystems/pendulums.rst:32
msgid "The components of the pendulum can be rendered as follows:"
msgstr "摆的组件显示如下："

#: ../../source/components/subsystems/pendulums.rst:40
msgid "System Model"
msgstr "系统模型"

#: ../../source/components/subsystems/pendulums.rst:44
msgid ""
"Now that we have an individual pendulum model, we can build a system of "
"pendulums.  If we want a system of :math:`n` pendulums where the period for "
"a complete cycle of the system is :math:`T` seconds, we compute the length "
"of the :math:`i^{th}` pendulum as:"
msgstr ""
"现在，有了单独的摆模型，我们就可以建立钟摆组成的系统。如果我们想要一个有\\ :math:`n`\\ 个摆的系统，而系统的完整周期为\\ "
":math:`T`\\ 秒。而第\\ :math:`i`\\ 个摆的长度可以用如下方式计算："

#: ../../source/components/subsystems/pendulums.rst:53
msgid ""
"where :math:`g_n` is Earth's gravitational constant, :math:`n` is the number"
" of pendulums, :math:`T` is the period of one complete cycle of the system "
"and :math:`X` is the number of oscillations of the longest pendulum over "
":math:`T` seconds."
msgstr ""
"其中\\ :math:`g_n`\\ 是地球的引力常数。\\ :math:`n`\\ 是钟摆的数量。\\ :math:`T`\\ "
"是该系统完整循环的周期。而\\ :math:`X`\\ 是最长的摆锤在\\ :math:`T`\\ 秒的振荡次数。"

#: ../../source/components/subsystems/pendulums.rst:58
msgid "In Modelica, we could build such a system as follows:"
msgstr "Modelica里我们可以建立上述系统，如下："

#: ../../source/components/subsystems/pendulums.rst:64
msgid "The following declaration is particularly interesting:"
msgstr "以下声明特别值得关注："

#: ../../source/components/subsystems/pendulums.rst:70
msgid ""
"Because ``pendulum`` is an array of ``n`` components, there will be ``n`` "
"values for the ``x``, ``m``, ``phi`` and ``L`` parameters associated with "
"these pendulums.  For example, if ``n=3``, then the model will have 3 values"
" for ``x``: ``pendulum[1].x``, ``pendulum[2].x`` and ``pendulum[3].x``.  In "
"the declaration of ``pendulum``, we handle this in different ways for "
"different parameters.  In the case of ``m``, we give each pendulum the same "
"value with the modification ``each m=1``.  However, in the case of ``L`` "
"(and ``x``), we supply an array of values, ``L=lengths`` used to initialize "
"the parameters where the values in the ``lengths`` array are computed using "
"the equation for pendulum lengths we introduced earlier.  We will give a "
"more complete discussion on how to apply modifications to arrays of "
"components :ref:`later in this chapter <sub-modifications>`."
msgstr ""
"因为\\ ``pendulum``\\ 是有\\ ``n``\\ 个分量的数组，将有\\ ``n``\\ 个\\ ``x``\\ 、\\ ``m``\\"
" 、\\ ``phi``\\ 和\\ ``L``\\ 这些与摆相关的参数。举个例子，如果\\ ``n=3``\\ ，那么模型的\\ ``x``\\ "
"将有3个值：\\ ``pendulum[1].x``\\ 、\\ ``pendulum[2].x``\\ 和\\ ``pendulum[3].x``\\"
" 。在\\ ``pendulum``\\ 声明里，我们以不同方式对不同参数进行处理。对于\\ ``m``\\ ，我们使用\\ ``each "
"m=1``\\ 为每个钟摆赋相同的值。然而，对于\\ ``L``\\ （和\\ ``x``\\ ），我们提供数组以进行赋值。而\\ "
"``lengths``\\ 数组中的值使用前面介绍的钟摆长度公式来计算。我们将在\\ :ref:`\\ 本章后面\\ <sub-"
"modifications>`\\ 更完整地讨论如何将修改应用到组件数组。"

#: ../../source/components/subsystems/pendulums.rst:85
msgid ""
"If we simulate this system, we get the following solution for the trajectory"
" of each of the pendulums:"
msgstr "如果对上述系统进行仿真，我们可以得到各摆轨迹的解。其如下所示："

#: ../../source/components/subsystems/pendulums.rst:93
msgid ""
"As we can see from this plot, every 54 seconds all the pendulums return to "
"their initial position."
msgstr "我们可以从这个图看出，所有摆在每过54秒后都会回到初始位置。"

#: ../../source/components/subsystems/pendulums.rst:110
msgid "Conclusion"
msgstr "结论"

#: ../../source/components/subsystems/pendulums.rst:112
msgid ""
"In this section, we have seen how arrays of components can be used, declared"
" and modified.  In this particular case, this allows us to specify the "
"number of pendulums in our system and then simulate them to observe the "
"peculiar behavior observed when we choose their lengths according to the "
"equation specified earlier."
msgstr ""
"本节中，我们看到了如何才能使用、声明和修改组件阵列。在本节的例子里，这允许我们指定系统内摆的数目并进行仿真。目的是观察这些摆在应用由前述方程式指定的不同长度时的特别行为。"

#: ../../source/components/subsystems/pendulums.rst:118
msgid ""
"Richard E. Berg, \"Pendulum waves: A demonstration of wave motion using "
"pendula\" http://dx.doi.org/10.1119/1.16608"
msgstr ""

#~ msgid ""
#~ "   The results are even more impressive when visualized in three   "
#~ "dimensions:"
#~ msgstr "   上述结果的三维动画就更引人注目了："
