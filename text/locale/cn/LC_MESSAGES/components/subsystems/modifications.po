# 
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example 0.2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-14 10:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/components/subsystems/modifications.rst:4
msgid "Modifications"
msgstr "修改语句"

#: ../../source/components/subsystems/modifications.rst:6
msgid ""
"Previously, we've seen examples of modifications applied to variables.  In "
"some cases, these modifications are applied to :ref:`attributes` of built-in"
" types, *e.g.,*"
msgstr "此前，我们看到了应用在变量上的修改语句的例子。在某些情况下，这些修改应用在内建类型的\\ :ref:`attributes`\\ 上, 如："

#: ../../source/components/subsystems/modifications.rst:14
msgid ""
"In other cases, they have been applied to ``model`` instances to change the "
"values of parameters for that particular instance, *e.g.,*"
msgstr "在另一些情况下，修改语句则应用在\\ ``model``\\ 实例上，用以改变该特定实例参数的值，例如："

#: ../../source/components/subsystems/modifications.rst:21
msgid ""
"But it is also worth pointing out that such modifications can reach down "
"deeper into the hierarchy than simply one level.  For example, consider the "
"previous example involving a ``StepVoltage`` component. We could also have "
"made a modification to the ``min`` attribute associated with the ``Vf`` "
"parameter in the ``Vs`` instance of the ``StepVoltage`` model as follows:"
msgstr ""
"但需要指出，这样的修改语句可以向下修改不止一个层级。例如，考虑前面涉及\\ ``StepVoltage``\\ 组件的例子。我们也可以修改\\ "
"``StepVoltage``\\ 模型的\\ ``Vs``\\ 实例内与\\ ``Vf``\\ 参数相关联的\\ ``min``\\ 属性，如下："

#: ../../source/components/subsystems/modifications.rst:32
msgid ""
"But what if we wanted to change an attribute of the ``Vf`` parameter **and**"
" give it a value?  The syntax for such a modification is:"
msgstr "但是，如果我们想同时改变\\ ``Vf``\\ 参数的属性\\ **并且**\\ 赋值呢？这种修改的语法为："

#: ../../source/components/subsystems/modifications.rst:39
msgid ""
"An important case worth discussion, with regards to modifications, is how "
"modifications are performed on **arrays** of components.  Imagine we had an "
"array of ``StepVoltage`` components declared as follows:"
msgstr "一个值得讨论的重要情况是，怎么如何对组件\\ **数组**\\ 的执行修改。想象一下，我们声明了\\ ``StepVoltage``\\ 组件的如下数组："

#: ../../source/components/subsystems/modifications.rst:47
msgid ""
"As we saw in our discussion of :ref:`arrays-of-components`, this is not only"
" legal Modelica, but it can be useful to represent a collection of "
"components within a subsystem.  If we want to give the parameter ``Vf`` a "
"value, we have two choices.  The first is to specify an array of values, "
"*e.g.,*"
msgstr ""
"正如我们在对\\ :ref:`arrays-of-components` "
"的讨论中看到的一样，这不是合法的Modelica代码。但这些语句可以用于表示子系统内组件的集合。如果想给参数\\ ``Vf``\\ "
"赋值，我们有两个选择。第一是指定值的数组，例如："

#: ../../source/components/subsystems/modifications.rst:57
msgid ""
"This assigns the values in the vector ``{24,26,28,30,32}`` to ``Vs[1].Vf``, "
"``Vs[2].Vf``, ``Vs[3].Vf``, ``Vs[4].Vf`` and ``Vs[5].Vf``, respectively.  "
"The other choice we have is to give the same value to every element in the "
"array.  We could use this same array initialization syntax, *e.g.,*"
msgstr ""
"这将向量\\ ``{24,26,28,30,32}``\\ 的值分别赋给了\\ ``VS[1].Vf``\\ 、\\ ``VS[2].Vf``\\ "
"、\\ ``VS[3].Vf``\\ 、\\ ``VS[4].Vf``\\ 和\\ ``VS[5].Vf``\\ "
"。另一个选择是给予该数组中的每个元素相同的值。我们可以使用和上面相同的数组初始化语法，如："

#: ../../source/components/subsystems/modifications.rst:67
msgid ""
"The problem comes when the number of elements in an array is defined by a "
"``parameter``, *e.g.,*"
msgstr "但若的数组大小取决于\\ ``parameter``\\ 的话，问题就来了，如："

#: ../../source/components/subsystems/modifications.rst:84
msgid ""
"This is an acceptable solution.  But imagine if we wanted to modify both the"
" value of ``Vf`` and the ``min`` attribute inside ``Vf``? We'd end up with "
"something like this:"
msgstr ""
"这是个可以接受的方案。但想象一下，如果我们同时希望修改\\ ``Vf``\\ 的值以及\\ ``Vf``\\ 内的\\ ``min``\\ "
"属性呢？我们最终会得到这样的语句："

#: ../../source/components/subsystems/modifications.rst:93
msgid ""
"With nested modifications, this kind of thing can get complicated quickly.  "
"Fortunately, Modelica includes a feature to deal with such situations.  By "
"placing the ``each`` keyword in front of a modification, that modification "
"is applied to every instance, *e.g.,*"
msgstr ""
"一个个嵌套的修改会让这些定义会很快变得十分复杂。好在Modelica的包括一个处理这种情况的特性。通过在修改语句前添加\\ ``each``\\ "
"关键字，可以让修改语句影响每一个实例，例如："

#: ../../source/components/subsystems/modifications.rst:103
msgid ""
"Modifications are an essential part of modeling because they allow us to "
"modify the parameter values down through the hierarchy.  As you can see from"
" the examples in this section, Modelica provides many features to make "
"applying modifications to hierarchies simple and powerful."
msgstr ""
"修改语句是建模的重要部分。因为这些语句能让我们通过层级向下修改参数值。正如你在本节中的例子中所看到的一样，Modelica语言提供了许多相关特性。这些特性能让应用在层次结构里的修改语句变得简单而功能强大。"

#: ../../source/components/subsystems/modifications.rst:75
msgid ""
"If we tried to initialize ``Vf`` with a literal array (*e.g.,* "
"``{24,24,24}``), then it won't adapt to changes in ``n``.  To address this "
"situation, we could use the :ref:`fill-function` function:"
msgstr ""
"如果我们试图用代码数组（如：\\ ``{24,24,24}``\\ ），"
"那么这些代码就不会自动适应不同的\\ ``n``\\ 。"
"为了解决这个问题，我们可以使用\\ :ref:`fill-function`\\ 函数："
